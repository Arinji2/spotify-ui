/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/playlist/{playlist_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Playlist Metadata + Tracks */
        get: operations["getPlaylist"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/artist/{artist_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Arist Metadata */
        get: operations["getArtist"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Token: {
            /** @description The access token to use for API calls. */
            access_token: string;
            /** @description The UNIX timestamp when the token expires. */
            expiry: number;
        };
        Error: {
            error: string;
            display_message?: string;
        };
        Image: {
            url: string;
            height: number;
            width: number;
        };
        SimplifiedArtist: {
            id: string;
            name: string;
        };
        User: {
            id: string;
            display_name: string;
        };
        PlaylistTrack: {
            added_at: string;
            is_local: boolean;
            track: components["schemas"]["Track"];
        };
        Track: {
            id: string;
            name: string;
            artists: components["schemas"]["SimplifiedArtist"][];
            duration_ms: number;
        };
        TrackPage: {
            items: components["schemas"]["PlaylistTrack"][];
        };
        Playlist: {
            id: string;
            name: string;
            description: string;
            images: components["schemas"]["Image"][];
            owner: components["schemas"]["User"];
            tracks: components["schemas"]["TrackPage"];
        };
        Artist: {
            id: string;
            name: string;
            images: components["schemas"]["Image"][];
        };
    };
    responses: {
        /** @description Unauthorized â€” secret is invalid */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal server error */
        InternalError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        AuthSecret: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getPlaylist: {
        parameters: {
            query: {
                secret: components["parameters"]["AuthSecret"];
            };
            header?: never;
            path: {
                playlist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Playlist data with tracks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Playlist"];
                };
            };
            401: components["responses"]["Unauthorized"];
            500: components["responses"]["InternalError"];
        };
    };
    getArtist: {
        parameters: {
            query: {
                secret: components["parameters"]["AuthSecret"];
            };
            header?: never;
            path: {
                artist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Artist data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Artist"];
                };
            };
            401: components["responses"]["Unauthorized"];
            500: components["responses"]["InternalError"];
        };
    };
}
