// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Artist defines model for Artist.
type Artist struct {
	Id     string  `json:"id"`
	Images []Image `json:"images"`
	Name   string  `json:"name"`
}

// Error defines model for Error.
type Error struct {
	DisplayMessage *string `json:"display_message,omitempty"`
	Error          string  `json:"error"`
}

// Image defines model for Image.
type Image struct {
	Height int    `json:"height"`
	Url    string `json:"url"`
	Width  int    `json:"width"`
}

// Playlist defines model for Playlist.
type Playlist struct {
	Description string    `json:"description"`
	Id          string    `json:"id"`
	Images      []Image   `json:"images"`
	Name        string    `json:"name"`
	Owner       User      `json:"owner"`
	Tracks      TrackPage `json:"tracks"`
}

// PlaylistTrack defines model for PlaylistTrack.
type PlaylistTrack struct {
	AddedAt string `json:"added_at"`
	IsLocal bool   `json:"is_local"`
	Track   Track  `json:"track"`
}

// SimplifiedArtist defines model for SimplifiedArtist.
type SimplifiedArtist struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// Track defines model for Track.
type Track struct {
	Artists    []SimplifiedArtist `json:"artists"`
	DurationMs int                `json:"duration_ms"`
	Id         string             `json:"id"`
	Name       string             `json:"name"`
}

// TrackPage defines model for TrackPage.
type TrackPage struct {
	Items []PlaylistTrack `json:"items"`
}

// User defines model for User.
type User struct {
	DisplayName string `json:"display_name"`
	Id          string `json:"id"`
}

// AuthSecret defines model for AuthSecret.
type AuthSecret = string

// InternalError defines model for InternalError.
type InternalError = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// GetArtistParams defines parameters for GetArtist.
type GetArtistParams struct {
	Secret AuthSecret `form:"secret" json:"secret"`
}

// GetPlaylistParams defines parameters for GetPlaylist.
type GetPlaylistParams struct {
	Secret AuthSecret `form:"secret" json:"secret"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Arist Metadata
	// (GET /api/artist/{artist_id})
	GetArtist(w http.ResponseWriter, r *http.Request, artistId string, params GetArtistParams)
	// Get Playlist Metadata + Tracks
	// (GET /api/playlist/{playlist_id})
	GetPlaylist(w http.ResponseWriter, r *http.Request, playlistId string, params GetPlaylistParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get Arist Metadata
// (GET /api/artist/{artist_id})
func (_ Unimplemented) GetArtist(w http.ResponseWriter, r *http.Request, artistId string, params GetArtistParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Playlist Metadata + Tracks
// (GET /api/playlist/{playlist_id})
func (_ Unimplemented) GetPlaylist(w http.ResponseWriter, r *http.Request, playlistId string, params GetPlaylistParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetArtist operation middleware
func (siw *ServerInterfaceWrapper) GetArtist(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "artist_id" -------------
	var artistId string

	err = runtime.BindStyledParameterWithOptions("simple", "artist_id", chi.URLParam(r, "artist_id"), &artistId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "artist_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArtistParams

	// ------------- Required query parameter "secret" -------------

	if paramValue := r.URL.Query().Get("secret"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "secret"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "secret", r.URL.Query(), &params.Secret)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "secret", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArtist(w, r, artistId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPlaylist operation middleware
func (siw *ServerInterfaceWrapper) GetPlaylist(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "playlist_id" -------------
	var playlistId string

	err = runtime.BindStyledParameterWithOptions("simple", "playlist_id", chi.URLParam(r, "playlist_id"), &playlistId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "playlist_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlaylistParams

	// ------------- Required query parameter "secret" -------------

	if paramValue := r.URL.Query().Get("secret"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "secret"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "secret", r.URL.Query(), &params.Secret)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "secret", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlaylist(w, r, playlistId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/artist/{artist_id}", wrapper.GetArtist)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/playlist/{playlist_id}", wrapper.GetPlaylist)
	})

	return r
}

type InternalErrorJSONResponse Error

type UnauthorizedJSONResponse Error

type GetArtistRequestObject struct {
	ArtistId string `json:"artist_id"`
	Params   GetArtistParams
}

type GetArtistResponseObject interface {
	VisitGetArtistResponse(w http.ResponseWriter) error
}

type GetArtist200JSONResponse Artist

func (response GetArtist200JSONResponse) VisitGetArtistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArtist401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetArtist401JSONResponse) VisitGetArtistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetArtist500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetArtist500JSONResponse) VisitGetArtistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPlaylistRequestObject struct {
	PlaylistId string `json:"playlist_id"`
	Params     GetPlaylistParams
}

type GetPlaylistResponseObject interface {
	VisitGetPlaylistResponse(w http.ResponseWriter) error
}

type GetPlaylist200JSONResponse Playlist

func (response GetPlaylist200JSONResponse) VisitGetPlaylistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPlaylist401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetPlaylist401JSONResponse) VisitGetPlaylistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPlaylist500JSONResponse struct{ InternalErrorJSONResponse }

func (response GetPlaylist500JSONResponse) VisitGetPlaylistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get Arist Metadata
	// (GET /api/artist/{artist_id})
	GetArtist(ctx context.Context, request GetArtistRequestObject) (GetArtistResponseObject, error)
	// Get Playlist Metadata + Tracks
	// (GET /api/playlist/{playlist_id})
	GetPlaylist(ctx context.Context, request GetPlaylistRequestObject) (GetPlaylistResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetArtist operation middleware
func (sh *strictHandler) GetArtist(w http.ResponseWriter, r *http.Request, artistId string, params GetArtistParams) {
	var request GetArtistRequestObject

	request.ArtistId = artistId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetArtist(ctx, request.(GetArtistRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArtist")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetArtistResponseObject); ok {
		if err := validResponse.VisitGetArtistResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPlaylist operation middleware
func (sh *strictHandler) GetPlaylist(w http.ResponseWriter, r *http.Request, playlistId string, params GetPlaylistParams) {
	var request GetPlaylistRequestObject

	request.PlaylistId = playlistId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPlaylist(ctx, request.(GetPlaylistRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPlaylist")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPlaylistResponseObject); ok {
		if err := validResponse.VisitGetPlaylistResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
